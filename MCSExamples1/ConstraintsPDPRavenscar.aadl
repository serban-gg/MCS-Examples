package PDPandRavenscarConstraints
public
	   annex MCS {**
	   		
	 -- Public functions, can be called by theorems in Constraint Annex libraries
	 -- and .mcs files importing the package

      functions
   
   		Has_Access_To(t:I_Thread,d:I_Data): aadlboolean =
		-- a predicate function, check if 
		-- connection exists between t and d
		(d.owner() = t.owner()) and 
		(let conn : set<I_Connection> = t.owner().connections(); 
		{c for (c in conn)| c.source().owner() = t  and 					    
                            c.destination().owner() = d}  <> empty)
-- Public theorem declarations, can be invoked in check statements of 
-- other theorems

	 theorems
		Check_Package_PDP<root:nil>(p:T_Package) <= 
						**"All threads in package’ p ‘are periodic and have only data ports"**
			forall (c in p.classifiers()).check Periodic_Data_Ports_Only<c>()

		Check_Package_Ravenscar<root:nil>(p:T_Package) <= **"All threads in package" p 
  														"satisfy the Ravenscar constraints"**
			forall (c in p.classifiers()). c.category() = "system implementation" =>
					check No_Aperiodic_Threads<c>() and
					check Shared_Data_Accessor_Has_Priority_Ceiling<c>() and
					check PCP_Static_Check<c>()

		Periodic_Data_Ports_Only () <=  		-- root default is C_Impl if not specified
 						**"No event ports and all threads periodic for classifier " root** 
			{e for 	(tp:union(I_Thread,I_Thread_Group,I_Process))
   					(e in tp.flat_features())| (e instanceof I_Event_Port or 
   												e instanceof I_Event_Data_Port)} = empty 
					and forall (t : I_Thread).
	             				t.has_property("Thread_Properties::Dispatch_Protocol") and
  								t.property("Thread_Properties::Dispatch_Protocol")= "Periodic" 
					
		
		 
	     No_Aperiodic_Threads <root:C_Impl> () <=
									-- Can be called only on instance trees of
									-- component implementation classifier
			** "No threads have property dispatch protocol Aperiodic or Background" **

	         forall (t : I_Thread).
	            t.has_property("Thread_Properties::Dispatch_Protocol") => 
				let p:aadlstring = t.property("Thread_Properties::Dispatch_Protocol");  
				((p <> 'Aperiodic') and (p <> 'Background'))
	     
		Shared_Data_Accessor_Has_Priority_Ceiling <root:C_Impl>  () <= 
			 ** "Threads with shared data access have concurrency property set to PCP" **
	         forall (d :I_Data).
	              let accessor_threads:{I_Thread} = {t for (t:I_Thread)|  t.Has_Access_To(d)};
	             (accessor_threads.size()  <= 1) or 
		         (d.has_property("Thread_Properties::Concurrency_Control_Protocol") 
			 	  and
   				 (d.property("Thread_Properties::Concurrency_Control_Protocol") = 'Priority_Ceiling'))
	     

	      PCP_Static_Check  <root:C_Impl> ()<=
		
				** "Threads have PCP values set correctly"  
					"Check wether all protected data priorities are higher than the maximum"
					"priority of the threads accessing the data , and all from the same processor"**

			forall (d:I_Data).		
			-- Set of the threads the acceed to the protected data
				let accessor_threads:{I_Thread} = {t for (t:I_Thread)|t.Has_Access_To(d)};

			-- Set of the processors that the accessor threads are bound to
				let threads_processors:{I_Processor} = 
					{p for (t in accessor_threads) (p:I_Processor) | t.Is_Bound_To(p)};
					
				not d.has_property("Concurrency_Control_Protocol") or
				d.property("Concurrency_Control_Protocol") <> "Protected_Access" or
				d.property("ARAO::Priority") >= 
					max({t.property("ARAO::Priority")<int> for (t in accessor_threads)}) and
				thread_processors.size() <= 1

   **};
	
end PDPandRavenscarConstraints;