package MCSBudgetCase
public
	
annex MCS {**
  constants
	MaximumWeight : real = 1.2 kg;
	
functions
	
	-- c omputational function to calculate total of weight budget from subcomponents
	AddSubcomponentWeightBudgets(self: I_Component) : real = 
		sum({WeightBudget(t) for (t in subcomponents(self))}) 

	-- total of weight budgets of all components
	AddAllBudgets(self : I_Component) : real = 
		let subs :{I_Component} = subcomponents(self);
		if (length(subs) = 0) then
			WeightBudget(self)
		else
			sum({WeightBudget(t) for (t: subs)}) 

-- retrieves weight budget or 0.0 if no budget was assigned
	WeightBudget(self: I_Component): real =
 		if not self.has_property("SEI::GrossWeight") then 0.0 else property(self,"SEI::GrossWeight")

-- assure all direct subcomponents have a weight budget
	SubcomponentsHaveWeightBudgetFail(self: I_Component): bool =
		let ratio : int = self.SubcomponentWeightBudgetCoveragePercent();
 		forall (sub in subcomponents(self)). sub.has_property("SEI::GrossWeight") 
     									 	fail ** "Percentage of subcomponents with weight " ratio "%" **

-- assure all direct subcomponents have a weight budget
	SubcomponentsHaveWeightBudget(self:I_Component): bool =
    	forall (sub in subcomponents(self)). has_property(sub,"SEI::GrossWeight") 

-- calcuate the ratio of components with budget vs. all subcomponents
	SubcomponentWeightBudgetCoveragePercent(self:I_Component): int = 
		let subs: {I_Component} = subcomponents(self); 
 		sum({ 100 for (sub in subs) | sub.has_property("SEI::GrossWeight")})/ (length(subs))
 	
 	HasWeightBudget(t : I_Component) : bool =  
 		has_property(t,"SEI::GrossWeight") fail ** t " has no weight" ** 
 
 theorems
 
 	SystemWideReq1() <= ** "All threads have a period" ** 
 		forall (t: I_Thread). check HasPeriod(t)
 
 	HasPeriod(t : I_Thread) <= ** "Thread " t " has a period" ** 
 		t.has_property("Timing_Properties::Period")
 
 	AllHaveBudgets(self : I_Component) <= ** "Component " self " shall have a weight budget" ** 
 		HasWeightBudget(self) and forall (c in subcomponents(self)). AllHaveBudgets(c) 
		
	-- requirement expressed in terms of the Maximum weight constant
	SCSReq1(self : I_Component) <=
	**  "R1: SCS shall be no heaver than " MaximumWeight%kg  **
	 	check SCSReq1AssureSubcomponentTotals(self, MaximumWeight) and 
	 	check SCSReq1AssureRecursivetotals(self, MaximumWeight)

	-- requirement with the maximum passed into the claim function as parameter
	-- the prove statement will refer to the constant Maximumweight
	SCSReq1_1(self : I_Component, maxw :real) <=
	**  "R1: SCS shall be no heaver than " maxkg%kg **
	 	check SCSReq1VA1_1(self, maxw) and 
	 	check SCSReq1AssureRecursivetotals(self, maxw) 
	
	-- verification action for requirement 1
	-- VA1 does it by assuring thet the direct subcomponent budget totals do not exceed the limit
	SCSReq1AssureSubcomponentTotals(self : I_Component, maxw :real) <=
	** "AVA1: assured sum of subcomponent budgets within budget" **
	-- we only evaluate the weight total if subcomponents have weight budget
		check SCSReq1VA1SubcomponentsHaveWeight(self) and 
		check SCSReq1VA1VerifySubcomponentTotals(self, maxw)  

	SCSReq1VA1VerifySubcomponentTotals(self : I_Component, maxw :real) <=
	** "VA1: sum of direct subcomponent weights " actuals%kg " within budget "  maxw%kg **
		let actuals : real = AddSubcomponentWeightBudgets(self); 
	-- checking for over budget results in a fail exception. Otherwise return true
		(actuals <= maxw) fail ** self " weight sum " actuals%kg " over budget " maxw%kg **  
	
	-- Also it specifies the assumption for the verification as a predicate function
	SCSReq1VA1_1(self : I_Component, maxw :real) <=
	** "VA1: sum of direct subcomponent weights " actuals%kg " within budget "  maxw%kg **
		let actuals : real = AddSubcomponentWeightBudgets(self); 
		SubcomponentsHaveWeightBudgetFail(self) => 
	-- in this case we will not evaluate the budget if the assumption does not hold
		(actuals <= maxw)  fail ** self "weight sum " actuals%kg " over budget " maxw%kg **
	
	-- this verification action recursively adds all budgets
	SCSReq1AssureRecursivetotals(self : I_Component, maxw :real) <=
	** "VA2: sum of all subcomponent weights " actuals%kg " within budget " maxw%kg **
		let actuals : real = AddAllBudgets(self); 
		(actuals <= maxw) fail ** self "All weight sum " actuals%kg " over budget " maxw%kg **  
	
	SCSReq1VA1SubcomponentsHaveWeight(self : I_Component) <=
	** "Ass1: All subcomponents have gross weight" **
		let ratio : int = SubcomponentWeightBudgetCoveragePercent(self);
 		forall (sub in subcomponents(self)). has_property(sub,"SEI::GrossWeight") 
   											 fail ** "Percentage of subcomponents with weight " ratio "%" **
 
**};
end MCSBudgetCase ;